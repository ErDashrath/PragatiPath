# Generated by Django 5.2.6 on 2025-09-25 22:53

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('assessment', '0008_adaptivequestion_chapter_adaptivequestion_subject_fk_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdaptiveSubmission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question_type', models.CharField(help_text='Type of question (multiple_choice, etc.)', max_length=50)),
                ('chapter', models.CharField(blank=True, help_text='Chapter/topic within subject', max_length=100)),
                ('subtopic', models.CharField(blank=True, help_text='Specific subtopic', max_length=100)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('moderate', 'Moderate'), ('difficult', 'Difficult'), ('expert', 'Expert')], help_text='Difficulty level when question was presented', max_length=20)),
                ('selected_answer', models.CharField(help_text="Student's selected answer", max_length=10)),
                ('correct_answer', models.CharField(help_text='Correct answer for the question', max_length=10)),
                ('is_correct', models.BooleanField(help_text='Whether the student answered correctly')),
                ('time_spent_seconds', models.FloatField(help_text='Time spent on this question in seconds', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('question_number_in_session', models.PositiveIntegerField(help_text='Question order in session')),
                ('bkt_mastery_before', models.FloatField(default=0.5, help_text='BKT mastery level before this submission', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('dkt_prediction_before', models.FloatField(default=0.5, help_text='DKT prediction before this submission', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('bkt_mastery_after', models.FloatField(default=0.5, help_text='BKT mastery level after this submission', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('dkt_prediction_after', models.FloatField(default=0.5, help_text='DKT prediction after this submission', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('skill_id', models.CharField(help_text='Skill ID for knowledge tracing', max_length=100)),
                ('bkt_params', models.JSONField(default=dict, help_text='BKT parameters (P_L, P_T, P_G, P_S) at time of submission')),
                ('dkt_hidden_state', models.JSONField(default=dict, help_text='DKT hidden state vector at time of submission')),
                ('next_difficulty_recommended', models.CharField(choices=[('easier', 'Easier'), ('same', 'Same'), ('harder', 'Harder')], default='same', help_text='Recommended difficulty change after this submission', max_length=20)),
                ('adaptation_reason', models.TextField(blank=True, help_text='Explanation for why adaptation was chosen')),
                ('session_accuracy_before', models.FloatField(default=0.0, help_text='Session accuracy before this submission', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('session_accuracy_after', models.FloatField(default=0.0, help_text='Session accuracy after this submission', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('submission_source', models.CharField(choices=[('frontend_api', 'Frontend API'), ('mobile_app', 'Mobile App'), ('web_interface', 'Web Interface'), ('api_test', 'API Test'), ('system_test', 'System Test')], default='frontend_api', help_text='Source/origin of this submission', max_length=50)),
                ('interaction_data', models.JSONField(default=dict, help_text='Additional interaction data and context')),
                ('is_first_attempt', models.BooleanField(default=True, help_text='Whether this is the first attempt at this question type')),
                ('is_mastery_achieved', models.BooleanField(default=False, help_text='Whether mastery was achieved after this submission')),
                ('contributed_to_mastery', models.BooleanField(default=False, help_text='Whether this submission contributed to mastery improvement')),
                ('question', models.ForeignKey(help_text='The question that was answered', on_delete=django.db.models.deletion.CASCADE, related_name='adaptive_submissions', to='assessment.adaptivequestion')),
                ('session', models.ForeignKey(help_text='Learning session this submission belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='adaptive_submissions', to='assessment.studentsession')),
                ('student', models.ForeignKey(help_text='Student who made this submission', on_delete=django.db.models.deletion.CASCADE, related_name='adaptive_submissions', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(help_text='Subject/topic of the question', on_delete=django.db.models.deletion.CASCADE, related_name='adaptive_submissions', to='assessment.subject')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['student', 'created_at'], name='assessment__student_6a077f_idx'), models.Index(fields=['subject', 'chapter'], name='assessment__subject_25b29f_idx'), models.Index(fields=['difficulty_level', 'is_correct'], name='assessment__difficu_a2bebd_idx'), models.Index(fields=['session', 'question_number_in_session'], name='assessment__session_3d0b92_idx'), models.Index(fields=['skill_id', 'created_at'], name='assessment__skill_i_9e31ae_idx')],
            },
        ),
        migrations.CreateModel(
            name='AdaptiveSubmissionAnalytics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('analytics_type', models.CharField(choices=[('student_subject', 'Student-Subject Analytics'), ('session_summary', 'Session Summary'), ('subject_performance', 'Subject Performance'), ('skill_mastery', 'Skill Mastery Analytics'), ('difficulty_progression', 'Difficulty Progression')], max_length=50)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('total_submissions', models.PositiveIntegerField(default=0)),
                ('correct_submissions', models.PositiveIntegerField(default=0)),
                ('accuracy_rate', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('average_time_per_question', models.FloatField(default=0.0)),
                ('mastery_improvement_rate', models.FloatField(default=0.0)),
                ('easy_questions_attempted', models.PositiveIntegerField(default=0)),
                ('moderate_questions_attempted', models.PositiveIntegerField(default=0)),
                ('difficult_questions_attempted', models.PositiveIntegerField(default=0)),
                ('starting_mastery', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('ending_mastery', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('mastery_growth', models.FloatField()),
                ('analytics_data', models.JSONField(default=dict, help_text='Detailed analytics data and metrics')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='assessment.studentsession')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='assessment.subject')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('student', 'subject', 'analytics_type', 'period_start')},
            },
        ),
    ]
