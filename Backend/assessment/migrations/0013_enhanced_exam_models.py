# Generated by Django 5.2.6 on 2025-10-17 07:35

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('assessment', '0012_remove_studentmastery_unique_session_subject_chapter_mastery_and_more'),
        ('core', '0003_studentprofile_subject_progress'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EnhancedExam',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('exam_name', models.CharField(help_text='Display name for the exam', max_length=200)),
                ('exam_code', models.CharField(help_text='Unique exam identifier', max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Detailed exam description')),
                ('instructions', models.TextField(blank=True, help_text='Instructions for students')),
                ('exam_type', models.CharField(choices=[('PRACTICE', 'Practice Exam'), ('MOCK_TEST', 'Mock Test'), ('CHAPTER_TEST', 'Chapter Test'), ('FULL_TEST', 'Full Subject Test'), ('COMPETITIVE', 'Competitive Exam'), ('ASSESSMENT', 'Assessment Test')], default='PRACTICE', max_length=20)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner Level'), ('intermediate', 'Intermediate Level'), ('advanced', 'Advanced Level'), ('expert', 'Expert Level'), ('mixed', 'Mixed Difficulty')], default='mixed', max_length=20)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SCHEDULED', 'Scheduled'), ('ACTIVE', 'Active'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=20)),
                ('total_questions', models.PositiveIntegerField(help_text='Total number of questions in exam')),
                ('question_distribution', models.JSONField(default=dict, help_text='Question distribution by difficulty: {easy: 10, medium: 15, hard: 5}')),
                ('duration_minutes', models.PositiveIntegerField(help_text='Total exam duration in minutes')),
                ('time_per_question_seconds', models.PositiveIntegerField(blank=True, help_text='Optional time limit per question', null=True)),
                ('scheduled_start_time', models.DateTimeField(blank=True, help_text='When exam becomes available to students', null=True)),
                ('scheduled_end_time', models.DateTimeField(blank=True, help_text='When exam is no longer available', null=True)),
                ('adaptive_mode', models.BooleanField(default=False, help_text='Enable adaptive difficulty')),
                ('shuffle_questions', models.BooleanField(default=True, help_text='Randomize question order')),
                ('shuffle_options', models.BooleanField(default=True, help_text='Randomize option order')),
                ('allow_review', models.BooleanField(default=True, help_text='Allow answer review')),
                ('show_results_immediately', models.BooleanField(default=False, help_text='Show immediate results')),
                ('max_attempts_per_student', models.PositiveIntegerField(default=1, help_text='Max attempts allowed')),
                ('passing_score_percentage', models.DecimalField(decimal_places=2, default=Decimal('60.00'), help_text='Minimum score to pass', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('browser_lockdown', models.BooleanField(default=False, help_text='Enable browser lockdown')),
                ('prevent_tab_switching', models.BooleanField(default=False, help_text='Detect tab switching')),
                ('content_selection', models.JSONField(default=dict, help_text='Content selection configuration')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags for categorization')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('chapters', models.ManyToManyField(blank=True, help_text='Specific chapters (if not full subject)', related_name='enhanced_exams', to='assessment.chapter')),
                ('created_by', models.ForeignKey(help_text='Admin who created this exam', on_delete=django.db.models.deletion.PROTECT, related_name='created_enhanced_exams', to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(help_text='Primary subject for this exam', on_delete=django.db.models.deletion.CASCADE, related_name='enhanced_exams', to='assessment.subject')),
            ],
            options={
                'verbose_name': 'Enhanced Exam',
                'verbose_name_plural': 'Enhanced Exams',
                'db_table': 'enhanced_exams',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EnhancedExamAnalytics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('analytics_type', models.CharField(choices=[('EXAM_SUMMARY', 'Exam Overview'), ('STUDENT_PERFORMANCE', 'Student Performance'), ('QUESTION_ANALYSIS', 'Question Analysis'), ('DIFFICULTY_ANALYSIS', 'Difficulty Analysis'), ('TIME_ANALYSIS', 'Time Analysis')], max_length=30)),
                ('analysis_period_start', models.DateTimeField()),
                ('analysis_period_end', models.DateTimeField()),
                ('metrics', models.JSONField(default=dict, help_text='Computed metrics')),
                ('trends', models.JSONField(default=dict, help_text='Trend analysis')),
                ('insights', models.JSONField(default=dict, help_text='AI insights')),
                ('computation_version', models.CharField(default='1.0', max_length=20)),
                ('data_points_count', models.PositiveIntegerField(default=0)),
                ('confidence_score', models.DecimalField(decimal_places=3, default=Decimal('1.000'), max_digits=4)),
                ('computed_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('exam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='assessment.enhancedexam')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Enhanced Exam Analytics',
                'verbose_name_plural': 'Enhanced Exam Analytics',
                'db_table': 'enhanced_exam_analytics',
                'ordering': ['-computed_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentExamAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('attempt_number', models.PositiveIntegerField(help_text='Attempt number (1, 2, 3...)')),
                ('status', models.CharField(choices=[('REGISTERED', 'Registered/Not Started'), ('IN_PROGRESS', 'In Progress'), ('PAUSED', 'Paused'), ('SUBMITTED', 'Submitted'), ('COMPLETED', 'Completed/Graded'), ('ABANDONED', 'Abandoned'), ('TIMEOUT', 'Timed Out'), ('CANCELLED', 'Cancelled')], default='REGISTERED', max_length=20)),
                ('registered_at', models.DateTimeField(auto_now_add=True, help_text='Registration timestamp')),
                ('started_at', models.DateTimeField(blank=True, help_text='Exam start timestamp', null=True)),
                ('submitted_at', models.DateTimeField(blank=True, help_text='Submission timestamp', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='Completion timestamp', null=True)),
                ('total_time_spent_seconds', models.PositiveIntegerField(default=0, help_text='Total time spent')),
                ('active_time_seconds', models.PositiveIntegerField(default=0, help_text='Active answering time')),
                ('pause_count', models.PositiveIntegerField(default=0, help_text='Number of pauses')),
                ('total_pause_duration_seconds', models.PositiveIntegerField(default=0, help_text='Total pause time')),
                ('current_question_number', models.PositiveIntegerField(default=0, help_text='Current question')),
                ('questions_attempted', models.PositiveIntegerField(default=0, help_text='Questions attempted')),
                ('questions_answered', models.PositiveIntegerField(default=0, help_text='Questions answered')),
                ('questions_skipped', models.PositiveIntegerField(default=0, help_text='Questions skipped')),
                ('questions_flagged', models.PositiveIntegerField(default=0, help_text='Questions flagged')),
                ('total_questions', models.PositiveIntegerField(help_text='Total questions in attempt')),
                ('correct_answers', models.PositiveIntegerField(default=0, help_text='Correct answers')),
                ('incorrect_answers', models.PositiveIntegerField(default=0, help_text='Incorrect answers')),
                ('raw_score', models.DecimalField(decimal_places=3, default=Decimal('0.000'), help_text='Raw score', max_digits=10)),
                ('final_score_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Final percentage score', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('passed', models.BooleanField(default=False, help_text='Whether student passed')),
                ('grade', models.CharField(blank=True, help_text='Letter grade', max_length=10)),
                ('percentile_rank', models.DecimalField(blank=True, decimal_places=2, help_text='Percentile rank', max_digits=5, null=True)),
                ('submission_type', models.CharField(blank=True, choices=[('AUTO_SUBMIT', 'Auto-submitted (time up)'), ('MANUAL_SUBMIT', 'Manually submitted'), ('EARLY_SUBMIT', 'Early submission'), ('FORCED_SUBMIT', 'Force submitted by admin')], max_length=20, null=True)),
                ('submission_notes', models.TextField(blank=True, help_text='Submission notes')),
                ('browser_info', models.JSONField(default=dict, help_text='Browser information')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address', null=True)),
                ('session_data', models.JSONField(default=dict, help_text='Session data')),
                ('tab_switches', models.PositiveIntegerField(default=0, help_text='Tab switches detected')),
                ('copy_paste_attempts', models.PositiveIntegerField(default=0, help_text='Copy-paste attempts')),
                ('integrity_violations', models.JSONField(default=list, help_text='Integrity violations')),
                ('flagged_for_review', models.BooleanField(default=False, help_text='Flagged for review')),
                ('question_sequence', models.JSONField(default=list, help_text='Question order presented')),
                ('difficulty_progression', models.JSONField(default=list, help_text='Difficulty changes')),
                ('response_patterns', models.JSONField(default=dict, help_text='Response pattern analysis')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exam', models.ForeignKey(help_text='The exam being attempted', on_delete=django.db.models.deletion.CASCADE, related_name='student_attempts', to='assessment.enhancedexam')),
                ('student', models.ForeignKey(help_text='Direct link to User model for queries', on_delete=django.db.models.deletion.CASCADE, related_name='enhanced_exam_attempts', to=settings.AUTH_USER_MODEL)),
                ('student_profile', models.ForeignKey(help_text='Link to student profile (UUID-based)', on_delete=django.db.models.deletion.CASCADE, related_name='enhanced_exam_attempts', to='core.studentprofile')),
            ],
            options={
                'verbose_name': 'Student Exam Attempt',
                'verbose_name_plural': 'Student Exam Attempts',
                'db_table': 'student_exam_attempts',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='ExamQuestionAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_number', models.PositiveIntegerField(help_text='Question position (1-based)')),
                ('presented_order', models.PositiveIntegerField(help_text='Presentation order')),
                ('student_answer', models.TextField(blank=True, help_text="Student's answer")),
                ('correct_answer', models.TextField(help_text='Correct answer')),
                ('answer_status', models.CharField(choices=[('NOT_VIEWED', 'Not viewed'), ('VIEWED', 'Viewed but not answered'), ('ANSWERED', 'Answered'), ('SKIPPED', 'Skipped'), ('FLAGGED', 'Flagged for review'), ('TIMEOUT', 'Timed out'), ('CHANGED', 'Answer changed')], default='NOT_VIEWED', max_length=20)),
                ('is_correct', models.BooleanField(default=False)),
                ('partial_credit', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('points_possible', models.DecimalField(decimal_places=3, default=Decimal('1.000'), max_digits=6)),
                ('points_earned', models.DecimalField(decimal_places=3, default=Decimal('0.000'), max_digits=6)),
                ('first_viewed_at', models.DateTimeField(blank=True, null=True)),
                ('last_viewed_at', models.DateTimeField(blank=True, null=True)),
                ('first_answered_at', models.DateTimeField(blank=True, null=True)),
                ('final_answered_at', models.DateTimeField(blank=True, null=True)),
                ('total_time_spent_seconds', models.PositiveIntegerField(default=0)),
                ('thinking_time_seconds', models.PositiveIntegerField(default=0)),
                ('review_time_seconds', models.PositiveIntegerField(default=0)),
                ('difficulty_when_presented', models.CharField(max_length=20)),
                ('adaptive_level', models.IntegerField(blank=True, null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('answer_changes', models.PositiveIntegerField(default=0)),
                ('flagged_for_review', models.BooleanField(default=False)),
                ('answer_history', models.JSONField(default=list, help_text='Answer change history')),
                ('hints_requested', models.PositiveIntegerField(default=0)),
                ('hints_used', models.JSONField(default=list)),
                ('explanation_viewed', models.BooleanField(default=False)),
                ('confidence_level', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('difficulty_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('interaction_events', models.JSONField(default=list, help_text='Interaction log')),
                ('browser_events', models.JSONField(default=list, help_text='Browser events')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(help_text='Question being attempted', on_delete=django.db.models.deletion.CASCADE, related_name='enhanced_exam_attempts', to='assessment.adaptivequestion')),
                ('student', models.ForeignKey(help_text='Student reference', on_delete=django.db.models.deletion.CASCADE, related_name='enhanced_question_attempts', to=settings.AUTH_USER_MODEL)),
                ('exam_attempt', models.ForeignKey(help_text='Parent exam attempt', on_delete=django.db.models.deletion.CASCADE, related_name='question_attempts', to='assessment.studentexamattempt')),
            ],
            options={
                'verbose_name': 'Exam Question Attempt',
                'verbose_name_plural': 'Exam Question Attempts',
                'db_table': 'exam_question_attempts',
                'ordering': ['exam_attempt', 'question_number'],
            },
        ),
        migrations.AddIndex(
            model_name='enhancedexam',
            index=models.Index(fields=['subject', 'status'], name='enhanced_ex_subject_89b51b_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedexam',
            index=models.Index(fields=['exam_type', 'status'], name='enhanced_ex_exam_ty_0ec534_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedexam',
            index=models.Index(fields=['created_by', 'created_at'], name='enhanced_ex_created_0d0aa5_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedexam',
            index=models.Index(fields=['scheduled_start_time', 'scheduled_end_time'], name='enhanced_ex_schedul_940990_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedexamanalytics',
            index=models.Index(fields=['exam', 'analytics_type'], name='enhanced_ex_exam_id_018ce2_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedexamanalytics',
            index=models.Index(fields=['student', 'analytics_type'], name='enhanced_ex_student_077917_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedexamanalytics',
            index=models.Index(fields=['computed_at', 'expires_at'], name='enhanced_ex_compute_dce9f8_idx'),
        ),
        migrations.AddIndex(
            model_name='studentexamattempt',
            index=models.Index(fields=['student', 'status'], name='student_exa_student_5f6827_idx'),
        ),
        migrations.AddIndex(
            model_name='studentexamattempt',
            index=models.Index(fields=['exam', 'status'], name='student_exa_exam_id_452137_idx'),
        ),
        migrations.AddIndex(
            model_name='studentexamattempt',
            index=models.Index(fields=['student_profile', 'started_at'], name='student_exa_student_109bef_idx'),
        ),
        migrations.AddIndex(
            model_name='studentexamattempt',
            index=models.Index(fields=['status', 'submitted_at'], name='student_exa_status_1b8acd_idx'),
        ),
        migrations.AddIndex(
            model_name='studentexamattempt',
            index=models.Index(fields=['exam', 'final_score_percentage'], name='student_exa_exam_id_9039b1_idx'),
        ),
        migrations.AddIndex(
            model_name='studentexamattempt',
            index=models.Index(fields=['passed', 'completed_at'], name='student_exa_passed_759575_idx'),
        ),
        migrations.AddIndex(
            model_name='studentexamattempt',
            index=models.Index(fields=['flagged_for_review'], name='student_exa_flagged_369e0e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='studentexamattempt',
            unique_together={('student', 'exam', 'attempt_number')},
        ),
        migrations.AddIndex(
            model_name='examquestionattempt',
            index=models.Index(fields=['exam_attempt', 'question_number'], name='exam_questi_exam_at_df0600_idx'),
        ),
        migrations.AddIndex(
            model_name='examquestionattempt',
            index=models.Index(fields=['student', 'question'], name='exam_questi_student_05afac_idx'),
        ),
        migrations.AddIndex(
            model_name='examquestionattempt',
            index=models.Index(fields=['question', 'is_correct'], name='exam_questi_questio_579d27_idx'),
        ),
        migrations.AddIndex(
            model_name='examquestionattempt',
            index=models.Index(fields=['is_correct', 'total_time_spent_seconds'], name='exam_questi_is_corr_4faa0f_idx'),
        ),
        migrations.AddIndex(
            model_name='examquestionattempt',
            index=models.Index(fields=['difficulty_when_presented', 'is_correct'], name='exam_questi_difficu_9f8c6e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='examquestionattempt',
            unique_together={('exam_attempt', 'question')},
        ),
    ]
