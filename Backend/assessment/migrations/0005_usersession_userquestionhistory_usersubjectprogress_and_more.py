# Generated by Django 5.2.6 on 2025-09-25 16:11

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('assessment', '0004_add_assessment_modes_and_exam_sessions'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_type', models.CharField(choices=[('PRACTICE', 'Practice Session'), ('MOCK_TEST', 'Mock Test'), ('CHAPTER_TEST', 'Chapter Test'), ('FULL_TEST', 'Full Subject Test')], default='PRACTICE', max_length=20)),
                ('subject', models.CharField(choices=[('quantitative_aptitude', 'Quantitative Aptitude'), ('logical_reasoning', 'Logical Reasoning'), ('data_interpretation', 'Data Interpretation'), ('verbal_ability', 'Verbal Ability')], max_length=25)),
                ('chapter_number', models.IntegerField(blank=True, help_text='Specific chapter for chapter tests', null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active Session'), ('PAUSED', 'Paused Session'), ('COMPLETED', 'Completed Session'), ('ABANDONED', 'Abandoned Session')], default='ACTIVE', max_length=15)),
                ('current_question_index', models.IntegerField(default=0)),
                ('session_start_time', models.DateTimeField(auto_now_add=True)),
                ('session_end_time', models.DateTimeField(blank=True, null=True)),
                ('total_duration_seconds', models.IntegerField(default=0)),
                ('time_per_question', models.JSONField(default=list, help_text='List of time spent on each question')),
                ('questions_attempted', models.IntegerField(default=0)),
                ('questions_correct', models.IntegerField(default=0)),
                ('current_score', models.FloatField(default=0.0)),
                ('question_ids_sequence', models.JSONField(default=list, help_text='Ordered list of question UUIDs for this session')),
                ('answered_question_ids', models.JSONField(default=list, help_text='List of already answered question UUIDs')),
                ('current_difficulty_level', models.CharField(choices=[('very_easy', 'Very Easy'), ('easy', 'Easy'), ('moderate', 'Moderate'), ('difficult', 'Difficult')], default='easy', max_length=15)),
                ('mastery_scores_by_topic', models.JSONField(default=dict, help_text='Topic-wise mastery progression')),
                ('device_info', models.JSONField(blank=True, default=dict)),
                ('browser_info', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'db_table': 'user_sessions',
                'ordering': ['-session_start_time'],
            },
        ),
        migrations.CreateModel(
            name='UserQuestionHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_answer', models.CharField(blank=True, help_text="User's selected option (a/b/c/d)", max_length=5)),
                ('correct_answer', models.CharField(help_text='Correct option (a/b/c/d)', max_length=5)),
                ('answer_status', models.CharField(choices=[('CORRECT', 'Correct Answer'), ('INCORRECT', 'Incorrect Answer'), ('SKIPPED', 'Question Skipped'), ('TIMEOUT', 'Timed Out')], max_length=15)),
                ('question_start_time', models.DateTimeField(auto_now_add=True)),
                ('question_end_time', models.DateTimeField(blank=True, null=True)),
                ('time_spent_seconds', models.FloatField(default=0.0)),
                ('question_order_in_session', models.IntegerField(help_text='Order of this question in the session')),
                ('difficulty_when_presented', models.CharField(choices=[('very_easy', 'Very Easy'), ('easy', 'Easy'), ('moderate', 'Moderate'), ('difficult', 'Difficult')], help_text='Difficulty level when question was presented to user', max_length=15)),
                ('hints_requested', models.IntegerField(default=0)),
                ('explanation_viewed', models.BooleanField(default=False)),
                ('confidence_level', models.IntegerField(blank=True, choices=[(1, 'Very Low'), (2, 'Low'), (3, 'Medium'), (4, 'High'), (5, 'Very High')], null=True)),
                ('attempt_number', models.IntegerField(default=1, help_text='How many times user has seen this question')),
                ('previous_attempts', models.JSONField(default=list, help_text='History of previous attempts on this question')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_interactions', to='assessment.adaptivequestion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_history', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_interactions', to='assessment.usersession')),
            ],
            options={
                'verbose_name': 'User Question History',
                'verbose_name_plural': 'User Question Histories',
                'db_table': 'user_question_history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserSubjectProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('subject', models.CharField(choices=[('quantitative_aptitude', 'Quantitative Aptitude'), ('logical_reasoning', 'Logical Reasoning'), ('data_interpretation', 'Data Interpretation'), ('verbal_ability', 'Verbal Ability')], max_length=25)),
                ('total_questions_attempted', models.IntegerField(default=0)),
                ('total_questions_correct', models.IntegerField(default=0)),
                ('current_mastery_level', models.CharField(choices=[('very_easy', 'Very Easy'), ('easy', 'Easy'), ('moderate', 'Moderate'), ('difficult', 'Difficult')], default='easy', max_length=15)),
                ('chapter_progress', models.JSONField(default=dict, help_text='Progress per chapter {chapter_num: {attempted, correct, mastery_score}}')),
                ('topic_mastery_scores', models.JSONField(default=dict, help_text='Mastery scores per topic')),
                ('total_study_time_seconds', models.IntegerField(default=0)),
                ('average_time_per_question', models.FloatField(default=0.0)),
                ('total_sessions', models.IntegerField(default=0)),
                ('weekly_accuracy_trend', models.JSONField(default=list, help_text='Weekly accuracy percentages')),
                ('difficulty_progression', models.JSONField(default=list, help_text='Historical difficulty level progression')),
                ('current_correct_streak', models.IntegerField(default=0)),
                ('longest_correct_streak', models.IntegerField(default=0)),
                ('current_study_streak_days', models.IntegerField(default=0)),
                ('longest_study_streak_days', models.IntegerField(default=0)),
                ('last_session_date', models.DateTimeField(blank=True, null=True)),
                ('last_question_answered', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_progress', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Subject Progress',
                'verbose_name_plural': 'User Subject Progress',
                'db_table': 'user_subject_progress',
            },
        ),
        migrations.CreateModel(
            name='UserDailyStats',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField(help_text='Date for these statistics')),
                ('total_study_time_seconds', models.IntegerField(default=0)),
                ('questions_attempted', models.IntegerField(default=0)),
                ('questions_correct', models.IntegerField(default=0)),
                ('sessions_completed', models.IntegerField(default=0)),
                ('subject_time_distribution', models.JSONField(default=dict, help_text='Time spent per subject')),
                ('subject_question_counts', models.JSONField(default=dict, help_text='Questions attempted per subject')),
                ('new_topics_attempted', models.IntegerField(default=0)),
                ('difficulty_levels_unlocked', models.JSONField(default=list)),
                ('personal_bests', models.JSONField(default=list, help_text='Any personal bests achieved today')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_stats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Daily Stats',
                'verbose_name_plural': 'User Daily Stats',
                'db_table': 'user_daily_stats',
                'ordering': ['-date'],
                'indexes': [models.Index(fields=['user', 'date'], name='user_daily__user_id_2ffba5_idx'), models.Index(fields=['date'], name='user_daily__date_7b3548_idx')],
                'unique_together': {('user', 'date')},
            },
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['user', 'status'], name='user_sessio_user_id_b0c39f_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['subject', 'session_type'], name='user_sessio_subject_ab4099_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['session_start_time'], name='user_sessio_session_bd041b_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['status', 'updated_at'], name='user_sessio_status_a45225_idx'),
        ),
        migrations.AddIndex(
            model_name='userquestionhistory',
            index=models.Index(fields=['user', 'question'], name='user_questi_user_id_6851db_idx'),
        ),
        migrations.AddIndex(
            model_name='userquestionhistory',
            index=models.Index(fields=['session', 'question_order_in_session'], name='user_questi_session_0906d8_idx'),
        ),
        migrations.AddIndex(
            model_name='userquestionhistory',
            index=models.Index(fields=['answer_status', 'created_at'], name='user_questi_answer__18b54b_idx'),
        ),
        migrations.AddIndex(
            model_name='userquestionhistory',
            index=models.Index(fields=['user', 'answer_status'], name='user_questi_user_id_589393_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubjectprogress',
            index=models.Index(fields=['user', 'subject'], name='user_subjec_user_id_372314_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubjectprogress',
            index=models.Index(fields=['subject', 'current_mastery_level'], name='user_subjec_subject_2abb2e_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubjectprogress',
            index=models.Index(fields=['last_session_date'], name='user_subjec_last_se_12b97b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usersubjectprogress',
            unique_together={('user', 'subject')},
        ),
    ]
